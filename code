#! /usr/bin/env python

# Code Units - Reusable chunks of code for all languages
# Copyright (C) 2013  Michael Spencer <spencers1993@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys, os, os.path, shutil

exe = os.path.realpath(sys.argv[0])
install_dir = os.path.dirname(exe) + '/code-units'

new_dir = install_dir + '/default'
unit_dir = install_dir + '/units'
src_dir = install_dir + '/sources'
info_dir = install_dir + '/info'
dest_dir = os.getcwd()
    
def new_file(name):
    return new_dir + '/' + name 

def unit_file(name):
    return unit_dir + '/' + name
    
def use_file(name):
    return unit_file(name) + '/UNIT-USE'
    
def src_file(name):
    return src_dir + '/' + name
    
def build_file(name):
    return src_file(name) + '/UNIT-BUILD'
    
def fetch_file(name):
    return info_dir + '/' + name + '_fetch'
    
def dest_file(name):
    return dest_dir + '/' + name


def link(name, src):
    if os.path.exists(unit_file(name)):
        uninstall(name)
    
    os.system('ln -s "' + src + '" "' + unit_file(name) + '"')

def install(name, force=False):
    # If it already exists
    if os.path.exists(unit_file(name)):
        # If reinstalling,
        if force:
            uninstall(name)
        else: # Otherwise,
            # Done!
            print 'Unit already installed: ' + name
            return

    fetched = False

    # If a fetch script exists, but the source does not
    if not(os.path.exists(src_file(name))) and os.path.exists(fetch_file(name)):
        # Run it, downloading the unit into the source dir
        os.system(fetch_file(name) + ' install ' + src_file(name))
        fetched = True
        
    # If the source file does not exist,
    if not(os.path.exists(src_file(name))):
        if fetched:
            print 'Error: invalid fetch script for unit: ' + name
            exit()
        else:
            print 'Error: unit does not exist: ' + name
            exit()
        
    # If a build script exists,
    if os.path.exists(build_file(name)):
        # Build the unit
        os.system(build_file(name) + ' ' + src_file(name) + ' ' + unit_file(name))
    else: # Otherwise,
        # Copy the unit into the unit dir
        shutil.copytree(src_file(name), unit_file(name), True)

def uninstall(name):
    # Erase the old one,
    if os.path.exists(unit_file(name)):
        if os.path.islink(unit_file(name)):
            os.remove(unit_file(name))
        else:
            shutil.rmtree(unit_file(name))  
    else:
        print 'Unit not installed: ' + name
    
    if os.path.exists(src_file(name)):
        shutil.rmtree(src_file(name))
        
def update(name):
    if not(os.path.exists(unit_file(name))):
        print 'Unit not installed: ' + name
        return

    fetched = False
    
    # If the source exists,
    if os.path.exists(src_file(name)):
        # Run the update script
        os.system(fetch_file(name) + ' update ' + src_file(name))
    else: # Otherwise,
        if os.path.exists(unit_file(name)):
            print('Unit can\'t be updated because it is a link: ' + name)
            return
        else:
            # Install the unit
            install(name)
            return
        
    if os.path.exists(unit_file(name)):
        if os.path.islink(unit_file(name)):
            os.remove(unit_file(name))
        else:
            shutil.rmtree(unit_file(name))
        
    # If a build script exists,
    if os.path.exists(build_file(name)):
        # Build the unit
        os.system(build_file(name) + ' ' + src_file(name) + ' ' + unit_file(name))
    else: # Otherwise,
        # Copy the unit into the unit dir
        shutil.copytree(src_file(name), unit_file(name), True)
    

def use(name, fail=True):
    if os.path.exists(dest_file(name)) and fail:
        print 'Unit already used: ' + name
        exit()
    
    # If the unit is not installed,
    if not(os.path.exists(unit_file(name))):
        install(name, False)
                
    # If a use script exists,
    if os.path.exists(use_file(name)):
        # Run it
        os.system(use_file(name) + ' ' + unit_file(name) + ' ' + dest_file(name))
    else: # Otherwise,
        # Link the directory/file into the target
        os.symlink(unit_file(name), dest_file(name))
    
    
def unuse(name):
    if not(os.path.exists(dest_file(name))):
        print 'Unit not used: ' + name
        exit()
        
    os.remove(dest_file(name))
	
def setup():
    if not(os.path.exists('Codefile')):
        print 'No Codefile exists!'
        exit()
    file = open('Codefile')
    for line in file.readlines():
        use(line.strip(), False)

def print_available():
    print('Available units:')
    os.system('ls ' + unit_dir)

if __name__ == '__main__':
    if not(os.path.exists(unit_dir)):
        if os.path.exists(new_dir):
            shutil.copytree(new_dir, unit_dir, True)
        else:
            os.makedirs(new_dir)
            os.makedirs(unit_dir)
    if not(os.path.exists(src_dir)):
        os.makedirs(src_dir)
    if not(os.path.exists(info_dir)):
        os.makedirs(info_dir)

    if len(sys.argv) > 1:
        cmd = sys.argv[1]
        args = sys.argv[2:]
    
        if cmd == 'install':
            install(args[0], False)
        elif cmd == 'reinstall':
            install(args[0], True)
        elif cmd == 'uninstall':
            uninstall(args[0])
        elif cmd == 'update':
            update(args[0]) 
        elif cmd == 'link':
            link(args[0], args[1])
        elif cmd == 'use':
            use(args[0])
        elif cmd == 'unuse':
            unuse(args[0])
        elif cmd == 'setup':
            setup()
        else:
            print_available()
    else:
        print_available()   
    
